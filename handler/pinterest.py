import asyncio
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
import requests
import uuid
from pathlib import Path
import re

router = Router()


async def ask_pinterest_link(callback: CallbackQuery):
    await callback.message.answer(
        "üìå –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Pinterest –≤–∏–¥–µ–æ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ https://www.pinterest.com/pin/1234567890/\n"
        "‚Ä¢ https://pinterest.com/pin/1234567890/\n"
        "‚Ä¢ https://pin.it/abcdefg\n\n"
        "‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ –ø–∏–Ω–æ–≤!"
    )
    await callback.answer()


async def extract_video_url(page_url: str) -> str:
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    }

    response = await asyncio.to_thread(
        lambda: requests.get(page_url, headers=headers, timeout=15)
    )

    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {response.status_code}")

    html_content = response.text


    patterns = [
        r'"videos":\s*{.*?"url"\s*:\s*"(https?://[^"]+\.mp4[^"]*)"',
        r'<meta property="og:video" content="(https?://[^"]+\.mp4[^"]*)"',
        r'<video[^>]+src="(https?://[^"]+\.mp4[^"]*)"',
        r'<source[^>]+src="(https?://[^"]+\.mp4[^"]*)"',
        r'(https?://[^"]+\.mp4[^"]*)'
    ]

    for pattern in patterns:
        match = re.search(pattern, html_content, re.DOTALL)
        if match:
            return match.group(1).replace("\\/", "/")

    raise Exception("–í–∏–¥–µ–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")


async def send_pinterest_video(message: Message, page_url: str):
    try:
        video_url = await extract_video_url(page_url)

        try:
            await message.answer_video(video=video_url, caption="üìå –í–∏–¥–µ–æ —Å Pinterest")
            return
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}, –∫–∞—á–∞—é —Ñ–∞–π–ª...")

        temp_dir = Path("pinterest_videos")
        temp_dir.mkdir(exist_ok=True)
        filepath = temp_dir / f"pinterest_{uuid.uuid4().hex}.mp4"

        video_response = await asyncio.to_thread(
            lambda: requests.get(video_url, stream=True, timeout=30)
        )

        if video_response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {video_response.status_code}")

        with open(filepath, 'wb') as f:
            for chunk in video_response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)

        await message.answer_video(
            video=types.FSInputFile(filepath),
            caption="üìå –í–∏–¥–µ–æ —Å Pinterest"
        )

        filepath.unlink()

    except Exception as e:
        error_msg = str(e)
        if "–í–∏–¥–µ–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω" in error_msg:
            error_msg = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –≤ —ç—Ç–æ–º –ø–∏–Ω–µ. –í–æ–∑–º–æ–∂–Ω–æ:\n"
                "‚Ä¢ –≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è"
            )
        await message.answer(error_msg)
        print(f"Pinterest error: {e}")


@router.message(F.text.startswith("https://pin.it/"))
async def handle_pinit_link(message: Message):
    short_url = message.text.strip()
    processing_msg = await message.answer("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É...")

    try:
        response = await asyncio.to_thread(
            lambda: requests.head(short_url, allow_redirects=True, timeout=10)
        )
        final_url = response.url

        if "/pin/" not in final_url:
            await processing_msg.edit_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Pinterest pin!")
            return

        await processing_msg.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        await send_pinterest_video(message, final_url)
        await processing_msg.delete()

    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏: {e}")


@router.message(F.text.regexp(r"^https?://(www\.|ru\.)?pinterest\.com/"))
async def handle_pinterest_link(message: Message):
    url = message.text.strip()
    processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é Pinterest —Å—Å—ã–ª–∫—É...")

    try:
        if "/pin/" not in url:
            await processing_msg.edit_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Pinterest pin!")
            return

        await processing_msg.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        await send_pinterest_video(message, url)
        await processing_msg.delete()

    except Exception as e:
        await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
